$.fn.validateMini = function (e = {}) {
  let t = this.find("[validates]"),
    r = !0,
    l = !0,
    a = !0;
  e.useKeyup && (r = r),
    e.useFocus && (l = l),
    e.useBlur && (a = a),
    this.submit(function () {
      let e = !0;
      for (let r = 0; r < t.length; r++) {
        let l = $(t[r]),
          a = s(l.attr("validates"), l.val());
        u(l, a), !0 !== a && (e = !1);
      }
      return e;
    }),
    r &&
      t.keyup((e) => {
        let t = $(e.target),
          r = t.attr("validates"),
          l = t.val();
        u(t, s(r, l));
      }),
    a &&
      t.blur((e) => {
        let t = $(e.target),
          r = t.attr("validates"),
          l = t.val();
        u(t, s(r, l));
      }),
    l &&
      t.focus((e) => {
        u($(e.target), -1);
      });
  let n = {
    ...{
      مطلوب: (e, t) => "" != t || "القيمة فارغة!",
      email: (e, t) =>
        /\S+@\S+\.\S+/.test(t) || "القيمة ليست بريدًا إلكترونيًا!",
      between: (e, t) => {
        let r = e[0],
          l = e[1],
          a = t.length;
        return (r <= a && a <= l) || `القيمة المطلوبة من${r} الى ${l} حرفًا!`;
      },
      min: (e, t) => {
        let r = e[0];
        return r <= t.length || `قيمة أصغر  ${r} حرف!`;
      },
      max: (e, t) => {
        let r = e[0];
        return r >= t.length || `قيمة أكبر ${r} حرف!`;
      },
      numeric: (e, t) => !isNaN(t) || "القيمة ليست رقمًا!",
      num_min: (e, t) => {
        let r = e[0];
        return r <= parseInt(t) || `قيمة أكبر ${r} مطلوب!`;
      },
      num_max: (e, t) => {
        let r = e[0];
        return r >= parseInt(t) || `قيمة أصغر ${r} مطلوب!`;
      },
      num_between: (e, t) => {
        let r = e[0],
          l = e[1];
        return (
          (r <= (t = parseInt(t)) && t <= l) ||
          `قيمة أكبر ${r} وأصغر ${l} مطلوب!`
        );
      },
      same: (e, t) => {
        return $("#" + e[0]).val() === t || `القيمة لا تطابق كلمة ${e[0]}`;
      },
    },
    ...e.validates,
  };
  function s(e = null, t = null) {
    if (!e) return !0;
    for (valids = e.split("|"), i = 0; i < valids.length; i++) {
      let e = valids[i].split(":") || null;
      if (!n[e[0]]) continue;
      let r = e[1] ? e[1].split(",") : null,
        l = n[e[0]](r, t);
      if (!0 !== l) return l;
    }
    return !0;
  }
  function u(e, t) {
    let r = e.parent(),
      l = r.find("div.error-text");
    0 === l.length && (l = $(`<div class="error-text">${t}</div>`)),
      l.html(t),
      !0 === t
        ? (e.removeClass("valid-error"), e.addClass("valid-pass"), l.remove())
        : -1 === t
        ? (e.removeClass("valid-pass"),
          e.removeClass("valid-error"),
          l.remove())
        : (e.removeClass("valid-pass"),
          e.addClass("valid-error"),
          r.append(l[0]));
  }
};
